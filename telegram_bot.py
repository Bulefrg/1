import os
import zipfile
import requests
import sqlite3
from bs4 import BeautifulSoup as BS
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='5720257287:AAH9gJWPUoxTIpQ719U3NQDMy7yqDkspviI')
dp = Dispatcher(bot, storage=MemoryStorage())

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
shop_url = 'https://universofortnite.com/ru/tienda-de-hoy-en-fortnite/'

# URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
news_url = 'https://fortnitenews.com/'

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞
shop_response = requests.get(shop_url)
shop_content = shop_response.content

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞
shop_soup = BS(shop_content, 'html.parser')

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º 'fnapi-item' (—Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ)
shop_items = shop_soup.find_all(class_='fnapi-item')

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π
news_response = requests.get(news_url)
news_content = news_response.content

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–µ–π
news_soup = BS(news_content, 'html.parser')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        last_name TEXT
    )
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        review_text TEXT,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )
''')
conn.commit()


class WriteReview(StatesGroup):
    review = State()


async def send_welcome(message: types.Message):
    photo_path = '1644912199_15-kartinkin-net-p-fortnait-kartinki-16.jpg'
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption="–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?‚õèÔ∏è", reply_markup=get_keyboard())


def get_keyboard():
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ú–∞–≥–∞–∑–∏–Ω", "–ù–æ–≤–æ—Å—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤" –∏ "–ü—Ä–æ—Ñ–∏–ª—å"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('–ú–∞–≥–∞–∑–∏–Ωüè™', callback_data='shop'),
        InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏üì∞', callback_data='news'),
        InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüìù', callback_data='register'),
        InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤‚úçÔ∏è', callback_data='write_review'),
        InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüë§', callback_data='profile'),
        InlineKeyboardButton('–ø–æ–º–æ—â—å‚å®Ô∏è', callback_data='help'),
    )
    return keyboard


def get_back_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back'))
    return keyboard


@dp.callback_query_handler(lambda c: c.data == 'help')
async def send_help(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
    await send_help(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'shop')
async def handle_shop_callback(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
    await send_images(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'news')
async def handle_news_callback(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–æ—Å—Ç–∏"
    await get_news(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'register')
async def handle_register_callback(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    await register_user(callback_query.from_user, callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'write_review')
async def handle_write_review_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # Check if the user is registered
    user_id = callback_query.from_user.id
    cursor.execute('SELECT id FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result is None:
        await bot.send_message(callback_query.message.chat.id,
                               "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–∫–ø–∏ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüìù'.")
    else:
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
        await WriteReview.review.set()
        await bot.send_message(callback_query.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤üñäÔ∏è:")


@dp.callback_query_handler(lambda c: c.data == 'profile')
async def handle_profile_callback(callback_query: types.CallbackQuery):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
    await get_user_profile(callback_query.from_user, callback_query.message)


async def register_user(user: types.User, message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        cursor.execute('INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                       (user.id, user.username, user.first_name, user.last_name))
        conn.commit()
        await bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ!")
    except sqlite3.IntegrityError:
        await bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚ùå.")


async def get_user_profile(user: types.User, message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT id, username, first_name, last_name FROM users WHERE user_id = ?', (user.id,))
    result = cursor.fetchone()

    if result is None:
        await bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå.")
        return

    user_id, username, first_name, last_name = result

    profile_message = f"–≤–∞—à –∞–π–¥–∏ (–∫–æ—Ç–æ—Ä—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö): {user_id}\n" \
                      f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n" \
                      f"–ò–º—è: {first_name}\n" \
 \
            await bot.send_message(message.chat.id, profile_message)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    if message.text == '/start':
        await send_welcome(message)
    else:
        await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.‚å®",
                            reply_markup=get_back_keyboard())


@dp.callback_query_handler(lambda c: c.data == 'back')
async def handle_back_callback(callback_query: types.CallbackQuery):
    await send_welcome(callback_query.message)


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    help_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/help - üíÄ‚ò†Ô∏è"
    await message.reply(help_message)


@dp.message_handler(commands=['news'])
async def get_news(message: types.Message):
    # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_titles = news_soup.find_all("h2", class_="post-card__title")
    news_excerpts = news_soup.find_all("p", class_="post-card__excerpt")

    if len(news_titles) == 0 or len(news_excerpts) == 0:
        await bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüì∞.")
        return

    latest_title = news_titles[0].text
    latest_excerpt = news_excerpts[0].text

    photo_url = "https://www.kartinki24.ru/uploads/gallery/main/601/kartinki24_ru_fortnite_106.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ "URL_—Ñ–æ—Ç–æ" –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    response = f"–ù–æ–≤–æ—Å—Ç–∏ Fortnite:\n\n{latest_title}\n\n{latest_excerpt}"
    await bot.send_photo(chat_id=message.chat.id, photo=photo_url, caption=response)


@dp.message_handler(commands=['shop'])
async def send_images(message: types.Message):
    # Send a loading message
    loading_message = await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    temp_folder = 'temp_images'
    os.makedirs(temp_folder, exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    image_paths = []
    for i, item in enumerate(shop_items):
        img = item.find('img')
        if img:
            img_src = img['src']
            image_path = f'{temp_folder}/image_{i}.jpg'
            with open(image_path, 'wb') as f:
                image_data = requests.get(img_src).content
                f.write(image_data)
            image_paths.append(image_path)

    # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
    zip_file = 'shop_images.zip'
    with zipfile.ZipFile(zip_file, 'w') as zf:
        for image_path in image_paths:
            zf.write(image_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    photo_url = "https://kartinkin.net/uploads/posts/2022-02/thumbs/1644912214_46-kartinkin-net-p-fortnait-kartinki-49.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ "URL_—Ñ–æ—Ç–æ" –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    caption = "–í–æ—Ç —Ñ–æ—Ç–æ –º–∞–≥–∞–∑–∏–Ω–∞:"
    await bot.send_photo(message.chat.id, photo=photo_url, caption=caption)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP-–∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(zip_file, 'rb') as zf:
        caption = ""
        await bot.send_document(message.chat.id, zf, caption=caption)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É
    os.remove(zip_file)
    for image_path in image_paths:
        os.remove(image_path)
    os.rmdir(temp_folder)

    # Remove the loading message
    await loading_message.delete()


@dp.message_handler(state=WriteReview.review)
async def write_review_step2(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        review_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT id FROM users WHERE user_id = ?', (message.from_user.id,))
    user_id = cursor.fetchone()[0]

    cursor.execute('INSERT INTO reviews (user_id, review_text) VALUES (?, ?)', (user_id, review_text))
    conn.commit()

    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!‚úÖ")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()



if __name__ == '__main__':
    aiogram.executor.start_polling(dp)
